/*******************************************************************************
* CGoGN: Combinatorial and Geometric modeling with Generic N-dimensional Maps  *
* version 0.1                                                                  *
* Copyright (C) 2009-2012, IGG Team, LSIIT, University of Strasbourg           *
*                                                                              *
* This library is free software; you can redistribute it and/or modify it      *
* under the terms of the GNU Lesser General Public License as published by the *
* Free Software Foundation; either version 2.1 of the License, or (at your     *
* option) any later version.                                                   *
*                                                                              *
* This library is distributed in the hope that it will be useful, but WITHOUT  *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        *
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  *
* for more details.                                                            *
*                                                                              *
* You should have received a copy of the GNU Lesser General Public License     *
* along with this library; if not, write to the Free Software Foundation,      *
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA.           *
*                                                                              *
* Web site: http://cgogn.unistra.fr/                                           *
* Contact information: cgogn@unistra.fr                                        *
*                                                                              *
*******************************************************************************/

#include "Topology/generic/attributeHandler.h"
#include "Topology/generic/autoAttributeHandler.h"
#include "Topology/generic/traversorCell.h"
#include "Topology/generic/traversor2.h"
#include "Topology/generic/cellmarker.h"

namespace CGoGN
{

namespace Algo
{

namespace Volume
{

namespace Export
{

std::string truncFloatTO8(float f)
{
	std::stringstream ss;
	ss << f;
	std::string res = ss.str();
	return res.substr(0,8);
}

template <typename PFP>
bool exportNAS(typename PFP::MAP& map, const VertexAttribute<typename PFP::VEC3>& position, const char* filename)
{
	typedef typename PFP::MAP MAP;
	typedef typename PFP::VEC3 VEC3;

	// open file
	std::ofstream fout ;
	fout.open(filename, std::ios::out) ;

	if (!fout.good())
	{
		CGoGNerr << "Unable to open file " << filename << CGoGNendl ;
		return false ;
	}

	VertexAutoAttribute<unsigned int> indices(map,"indices_vert");


	fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
	fout << "$$      NASTRAN MEsh File Generated by CGoGN (ICube/IGG)                        $"<< std::endl;
	fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
	fout << "CEND" << std::endl;;
	fout << "BEGIN BULK" << std::endl;
	fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
	fout << "$$      Vertices position                                                       $"<< std::endl;
	fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
	unsigned int count=1;
	for (unsigned int i = position.begin(); i != position.end(); position.next(i))
	{
		const VEC3& P = position[i];
		fout << "GRID    ";
		fout << std::right;
		fout.width(8);
		fout << count;
		fout << "        ";
		fout << std::left;
		fout << std::setw(8)<<truncFloatTO8(P[0]) << std::setw(8)<<truncFloatTO8(P[1]) << std::setw(8)<<truncFloatTO8(P[2]) << std::endl;
		indices[i] = count++;
	}


	std::vector<unsigned int> hexa;
	std::vector<unsigned int> tetra;
	hexa.reserve(2048);
	tetra.reserve(2048);

	TraversorW<MAP> trav(map) ;
	for(Dart d = trav.begin(); d != trav.end(); d = trav.next())
	{
		unsigned int degree = 0 ;

		Traversor3WV<typename PFP::MAP> twv(map, d) ;
		for(Dart it = twv.begin(); it != twv.end(); it = twv.next())
		{
			degree++;
		}

		if (degree == 8)
		{
			//CAS HEXAEDRIQUE (ordre 2 quad superposes, le premier en CCW)
			Dart e = d;
			Dart f = map.template phi<21121>(d);
			hexa.push_back(indices[e]);
			e = map.phi1(e);
			hexa.push_back(indices[e]);
			e = map.phi1(e);
			hexa.push_back(indices[e]);
			e = map.phi1(e);
			hexa.push_back(indices[e]);
			hexa.push_back(indices[f]);
			e = map.phi_1(f);
			hexa.push_back(indices[f]);
			e = map.phi_1(f);
			hexa.push_back(indices[f]);
			e = map.phi_1(f);
			hexa.push_back(indices[f]);
		}

		if (degree == 4)
		{
			//CAS HEXAEDRIQUE (ordre 2 quad superposes, le premier en CCW)
			Dart e = d;
			tetra.push_back(indices[e]);
			e = map.phi1(e);
			tetra.push_back(indices[e]);
			e = map.phi1(e);
			tetra.push_back(indices[e]);
			e = map.template phi<211>(e);
			tetra.push_back(indices[e]);
		}
	}

	unsigned int countCell=1;
	unsigned int nbhexa = hexa.size()/8;
	unsigned int nbtetra = tetra.size()/4;



	fout << std::right;
	if (nbhexa!=0)
	{
		fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
		fout << "$$      Hexa indices                                                            $"<< std::endl;
		fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
		for (unsigned int i=0; i<nbhexa; ++i)
		{
			fout << "CHEXA   ";
			fout << std::setw(8) << countCell++ << std::setw(8)<< 0;
			fout <<  std::setw(8) << hexa[8*i] <<  std::setw(8) << hexa[8*i+1] <<  std::setw(8) << hexa[8*i+2];
			fout <<  std::setw(8) << hexa[8*i+3] <<  std::setw(8) << hexa[8*i+4] <<  std::setw(8) << hexa[8*i+6] << "+"<< std::endl;
			fout << "+       " <<  std::setw(8) << hexa[8*i+6] <<  std::setw(8) << hexa[8*i+7] << std::endl;
		}
	}

	if (nbtetra != 0)
	{
		fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
		fout << "$$      Tetra indices                                                           $"<< std::endl;
		fout << "$$ ---------------------------------------------------------------------------- $"<< std::endl;
		for (unsigned int i=0; i<nbtetra; ++i)
		{
			fout << "CTETRA  ";
			fout << std::setw(8) << countCell++ << std::setw(8)<< 0;
			fout << std::setw(8) << tetra[4*i] << std::setw(8) << tetra[4*i+1] << std::setw(8) << tetra[4*i+2] << std::setw(8) << tetra[4*i+3] << std::endl;
		}
	}

	fout << "ENDDATA" << std::endl;
	return true;
}


template <typename PFP>
bool exportMSH(typename PFP::MAP& map, const VertexAttribute<typename PFP::VEC3>& position, const char* filename)
{
	typedef typename PFP::MAP MAP;
	typedef typename PFP::VEC3 VEC3;

	// open file
	std::ofstream fout ;
	fout.open(filename, std::ios::out) ;

	if (!fout.good())
	{
		CGoGNerr << "Unable to open file " << filename << CGoGNendl ;
		return false ;
	}
}


template <typename PFP>
bool exportTet(typename PFP::MAP& map, const VertexAttribute<typename PFP::VEC3>& position, const char* filename)
{
	typedef typename PFP::MAP MAP;
	typedef typename PFP::VEC3 VEC3;

	// open file
	std::ofstream fout ;
	fout.open(filename, std::ios::out) ;

	if (!fout.good())
	{
		CGoGNerr << "Unable to open file " << filename << CGoGNendl ;
		return false ;
	}
}


template <typename PFP>
bool exportNodeEle(typename PFP::MAP& map, const VertexAttribute<typename PFP::VEC3>& position, const char* filename)
{
	typedef typename PFP::MAP MAP;
	typedef typename PFP::VEC3 VEC3;

	// open file
	std::ofstream fout ;
	fout.open(filename, std::ios::out) ;

	if (!fout.good())
	{
		CGoGNerr << "Unable to open file " << filename << CGoGNendl ;
		return false ;
	}

	std::ofstream foutEle ;
	foutEle.open(filename, std::ios::out) ;

	if (!fout.good())
	{
		CGoGNerr << "Unable to open file " << filename << CGoGNendl ;
		return false ;
	}
}


} // namespace Export

}

} // namespace Algo

} // namespace CGoGN
